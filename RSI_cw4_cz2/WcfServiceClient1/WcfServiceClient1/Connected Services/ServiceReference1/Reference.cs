//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClient1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexNum", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class ComplexNum : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double imagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double realField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double imag {
            get {
                return this.imagField;
            }
            set {
                if ((this.imagField.Equals(value) != true)) {
                    this.imagField = value;
                    this.RaisePropertyChanged("imag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double real {
            get {
                return this.realField;
            }
            set {
                if ((this.realField.Equals(value) != true)) {
                    this.realField = value;
                    this.RaisePropertyChanged("real");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IComplexCalc")]
    public interface IComplexCalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalc/addCNum", ReplyAction="http://tempuri.org/IComplexCalc/addCNumResponse")]
        WcfServiceClient1.ServiceReference1.ComplexNum addCNum(WcfServiceClient1.ServiceReference1.ComplexNum n1, WcfServiceClient1.ServiceReference1.ComplexNum n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalc/addCNum", ReplyAction="http://tempuri.org/IComplexCalc/addCNumResponse")]
        System.Threading.Tasks.Task<WcfServiceClient1.ServiceReference1.ComplexNum> addCNumAsync(WcfServiceClient1.ServiceReference1.ComplexNum n1, WcfServiceClient1.ServiceReference1.ComplexNum n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IComplexCalcChannel : WcfServiceClient1.ServiceReference1.IComplexCalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComplexCalcClient : System.ServiceModel.ClientBase<WcfServiceClient1.ServiceReference1.IComplexCalc>, WcfServiceClient1.ServiceReference1.IComplexCalc {
        
        public ComplexCalcClient() {
        }
        
        public ComplexCalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ComplexCalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComplexCalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComplexCalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceClient1.ServiceReference1.ComplexNum addCNum(WcfServiceClient1.ServiceReference1.ComplexNum n1, WcfServiceClient1.ServiceReference1.ComplexNum n2) {
            return base.Channel.addCNum(n1, n2);
        }
        
        public System.Threading.Tasks.Task<WcfServiceClient1.ServiceReference1.ComplexNum> addCNumAsync(WcfServiceClient1.ServiceReference1.ComplexNum n1, WcfServiceClient1.ServiceReference1.ComplexNum n2) {
            return base.Channel.addCNumAsync(n1, n2);
        }
    }
}
